// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProEventos.Persistence.Context;

#nullable disable

namespace ProEventos.Persistence.Migrations
{
    [DbContext(typeof(ProEventosContexto))]
    [Migration("20241014021738_InitialCreat")]
    partial class InitialCreat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("ProEventos.Domain.Entities.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataEvento")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalEvento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TemaEvento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.EventoPalestrante", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PalestranteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventoId", "PalestranteId");

                    b.HasIndex("EventoId")
                        .IsUnique();

                    b.HasIndex("PalestranteId")
                        .IsUnique();

                    b.ToTable("EventosPalestrantes");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId")
                        .IsUnique();

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Palestrante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Curriculo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Palestrantes");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.RedeSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PalestranteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UrlRedeSocial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId")
                        .IsUnique();

                    b.HasIndex("PalestranteId")
                        .IsUnique();

                    b.ToTable("RedesSociais");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.EventoPalestrante", b =>
                {
                    b.HasOne("ProEventos.Domain.Entities.Evento", "Evento")
                        .WithOne("EventosPalestrantes")
                        .HasForeignKey("ProEventos.Domain.Entities.EventoPalestrante", "EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProEventos.Domain.Entities.Palestrante", "Palestrante")
                        .WithOne("EventosPalestrantes")
                        .HasForeignKey("ProEventos.Domain.Entities.EventoPalestrante", "PalestranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Palestrante");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Lote", b =>
                {
                    b.HasOne("ProEventos.Domain.Entities.Evento", "Evento")
                        .WithOne("Lotes")
                        .HasForeignKey("ProEventos.Domain.Entities.Lote", "EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.RedeSocial", b =>
                {
                    b.HasOne("ProEventos.Domain.Entities.Evento", "Evento")
                        .WithOne("RedesSociais")
                        .HasForeignKey("ProEventos.Domain.Entities.RedeSocial", "EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProEventos.Domain.Entities.Palestrante", "Palestrante")
                        .WithOne("RedesSociais")
                        .HasForeignKey("ProEventos.Domain.Entities.RedeSocial", "PalestranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Palestrante");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Evento", b =>
                {
                    b.Navigation("EventosPalestrantes")
                        .IsRequired();

                    b.Navigation("Lotes")
                        .IsRequired();

                    b.Navigation("RedesSociais")
                        .IsRequired();
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Palestrante", b =>
                {
                    b.Navigation("EventosPalestrantes")
                        .IsRequired();

                    b.Navigation("RedesSociais")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
